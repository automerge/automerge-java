package org.automerge;

import java.util.Objects;

/**
 * Result of a document operation that includes both the closure result and any side effects.
 *
 * When modifying a document via DocumentActor.with_document(), the operation may generate
 * side effects like storage operations (saving changes) or messages to be sent to connected
 * peers. This type encapsulates both the result of the user's operation and the side effects
 * that need to be executed.
 *
 * @param <T> The type of the value returned by the document operation
 */
public class WithDocResult<T> {

    private final T value;
    private final DocActorResult actorResult;

    /**
     * Creates a WithDocResult instance.
     * Package-private constructor - only called from JNI layer.
     *
     * @param value The result returned by the document operation
     * @param actorResult Any side effects generated by the document operation (IO tasks, messages, etc.)
     */
    WithDocResult(T value, DocActorResult actorResult) {
        this.value = value;
        this.actorResult = Objects.requireNonNull(actorResult, "actorResult cannot be null");
    }

    /**
     * Gets the result returned by the document operation.
     *
     * This is the value that was returned by the closure passed to the with_document() method.
     * The type depends on what the document operation returned.
     *
     * @return The operation result value
     */
    public T getValue() {
        return value;
    }

    /**
     * Gets the side effects generated by the document operation.
     *
     * These side effects include:
     * - IO tasks that need to be executed (storage operations, announce policy checks)
     * - Messages to send back to the hub
     * - Ephemeral messages to broadcast to connected peers
     * - Document change events
     * - Whether the document actor is stopped
     *
     * The caller is responsible for executing these side effects appropriately.
     *
     * @return The actor result containing all side effects
     */
    public DocActorResult getActorResult() {
        return actorResult;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        WithDocResult<?> that = (WithDocResult<?>) obj;
        return Objects.equals(value, that.value) &&
               Objects.equals(actorResult, that.actorResult);
    }

    @Override
    public int hashCode() {
        return Objects.hash(value, actorResult);
    }

    @Override
    public String toString() {
        return "WithDocResult{" +
               "value=" + value +
               ", actorResult=" + actorResult +
               "}";
    }
}
