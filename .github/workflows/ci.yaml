name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  # Build JAR with all native libraries using Docker
  build-jar:
    needs: dev-test
    name: Build cross-platform JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        id: pull-image
        run: |
          if docker pull ghcr.io/${{ github.repository_owner }}/automerge-cross:latest; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Docker image
        if: steps.pull-image.outputs.success == 'false'
        run: |
          echo "❌ Docker image not found at ghcr.io/${{ github.repository_owner }}/automerge-cross:latest"
          echo ""
          echo "You need to build and push the Docker image first."
          echo "See docker-build/README.md for instructions."
          exit 1

      - name: Build JAR with all native libraries
        run: |
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            ghcr.io/${{ github.repository_owner }}/automerge-cross:latest \
            ./docker-build/build-in-docker.sh

      - name: Verify JAR contents
        run: |
          echo "=== JAR Contents ==="
          jar -tf lib/build/libs/automerge-*.jar | grep "native/" | sort
          echo ""
          echo "=== Native Libraries Count ==="
          COUNT=$(jar -tf lib/build/libs/automerge-*.jar | grep -E '\.(so|dll|dylib)$' | wc -l)
          echo "Found $COUNT native libraries"

          # Should have 6 libraries
          if [ "$COUNT" -ne 7 ]; then
            echo "❌ Expected 6 native libraries, found $COUNT"
            exit 1
          fi

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: automerge-jar
          path: lib/build/libs/automerge-*.jar
          retention-days: 7

  # Test the JAR on multiple platforms
  test-jar:
    name: Test on ${{ matrix.platform }}-${{ matrix.arch }}
    needs: build-jar
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu runners
          - os: ubuntu-latest
            runner: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: ubuntu-latest
            runner: ubuntu-24.04-arm
            platform: linux
            arch: arm64

          # Windows runners
          - os: windows-latest
            runner: windows-latest
            platform: windows
            arch: x86_64
          - os: windows-latest
            runner: windows-11-arm
            platform: windows
            arch: arm64

          # macOS runners
          - os: macos-13
            runner: macos-13
            platform: macos
            arch: x86_64
          - os: macos-latest
            runner: macos-latest
            platform: macos
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: automerge-jar
          path: lib/build/libs/

      - name: Verify JAR exists
        shell: bash
        run: |
          ls -lh lib/build/libs/
          echo ""
          echo "Testing with JAR:"
          ls lib/build/libs/automerge-*.jar

      - name: Create dummy local.properties
        run: |
          echo 'sdk.dir=/fake' >> local.properties
          echo 'ndkPath=/fake' >> local.properties
          echo 'aarchLinkerPath=/fake' >> local.properties
          echo 'win64LinkerPath=/fake' >> local.properties
          echo 'win32LinkerPath=/fake' >> local.properties
          echo 'aarchWinLinkerPath=/fake' >> local.properties
          echo 'x86_64LinuxLinkerPath=/fake' >> local.properties
          echo 'aarchDarwinLinkerPath=/fake' >> local.properties
          echo 'aarchDarwinLdPath=/fake' >> local.properties
          echo 'x86_64DarwinLinkerPath=/fake' >> local.properties
          echo 'x86_64DarwinLdPath=/fake' >> local.properties

      - name: Run tests with pre-built JAR
        shell: bash
        run: |
          ./gradlew lib:testJar --no-daemon

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.platform }}-${{ matrix.arch }}
          path: lib/build/test-results/testJar/
          retention-days: 7

  # quick tests that don't build for all architectures for fast feedback
  dev-test:
    name: Dev test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21 (for building)
        uses: actions/setup-java@v5
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Set up JDK 8 (for testing)
        uses: actions/setup-java@v5
        with:
          java-version: "8"
          distribution: "temurin"

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Create dummy local.properties
        run: |
          echo 'sdk.dir=/fake' >> local.properties
          echo 'ndkPath=/fake' >> local.properties
          echo 'aarchLinkerPath=/fake' >> local.properties
          echo 'win64LinkerPath=/fake' >> local.properties
          echo 'win32LinkerPath=/fake' >> local.properties
          echo 'aarchWinLinkerPath=/fake' >> local.properties
          echo 'x86_64LinuxLinkerPath=/fake' >> local.properties
          echo 'aarchDarwinLinkerPath=/fake' >> local.properties
          echo 'aarchDarwinLdPath=/fake' >> local.properties
          echo 'x86_64DarwinLinkerPath=/fake' >> local.properties
          echo 'x86_64DarwinLdPath=/fake' >> local.properties

      - name: Set JAVA_HOME to JDK 21 for build
        shell: bash
        run: |
          JAVA_21_HOME=$(env | grep '^JAVA_HOME_21_' | head -n 1 | cut -d= -f2-)
          if [ -n "$JAVA_21_HOME" ]; then
            echo "JAVA_HOME_FOR_BUILD=$JAVA_21_HOME" >> $GITHUB_ENV
            echo "Found JDK 21 at: $JAVA_21_HOME"
          else
            echo "ERROR: Could not find JDK 21 installation"
            echo "Available JAVA_HOME variables:"
            env | grep '^JAVA_HOME' || true
            exit 1
          fi

      - name: Build with Gradle (using JDK 21)
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_FOR_BUILD }}
        with:
          arguments: lib:assemble -Penv=dev --info

      - name: Test with Java 21 runtime
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_FOR_BUILD }}
        with:
          arguments: lib:test -Penv=dev --info

      - name: Test with Java 8 runtime (backward compatibility)
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_FOR_BUILD }}
        with:
          arguments: lib:testJava8 -Penv=dev --info
